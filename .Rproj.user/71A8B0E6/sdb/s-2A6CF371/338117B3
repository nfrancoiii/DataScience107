{
    "contents" : "---\ntitle: Introduction to Data Visualization\nauthor: Stephanie Hicks, Rafael Irizarry\n---\n\n# Data Visualization\n\n## Introduction\n\n\"The greatest value of a picture is when it forces us to notice what we never \nexpected to see.\" -John W. Tukey\n\n![John Tueky](http://upload.wikimedia.org/wikipedia/en/e/e9/John_Tukey.jpg)\n\nMistakes, biases, systematic errors and unexpected variability are commonly \nfound in data regardless of applications. Failure to discover these problems \noften leads to flawed analyses and false discoveries. As an example, \nconsider that measurement devices sometimes fail and not all summarization \nprocedures, such as the `mean` function in R, are designed to detect these. \nYet, these functions will still give you an answer. Furthermore, it may \nbe hard or impossible to notice an error was made just from the \nreported summaries. \n\nData visualization is a powerful approach to detecting these problems. \nWe refer to this particular task as _exploratory data analysis_ (EDA).\nMany important methodological contributions to existing techniques in\ndata analysis were initiated by discoveries made via EDA.\n\nOn a more positive note, data visualization can also lead to discoveries \nwhich would otherwise be missed if we simply subject the data to a \nbattery of statistical summaries or procedures. Through this course, \nwe make use of exploratory plots to motivate the analyses we choose. \n\nFinally, data visualization can provide a powerful way to communicate \na data-driven finding. In some cases, the visualization is so convincing, \nthat no follow-up is required. Many examples of this have appeared \nin the New York Times. The following three examples were provided \nby Amanda Cox, a data scientist that is responsible for most of the [infographics](http://www.nytimes.com/interactive/2009/11/06/business/economy/unemployment-lines.html) \nwe see in The New York Times. Both examples are basically histograms.\n\n\n#### NYC Regents Exam\n\nIn New York City you need a 65 to pass the Regents exam. Data on these \nscores are collected for several reasons. A histogram of the \ntest scores of grades from NYC Regents Exam tells an interesting story. \nThe histogram of these test scores _forces us to notice_ \nsomething somewhat problematic:\n\n<img src=\"pics/nythist.gif\" width=\"800\" align=\"middle\">\n\n\n#### Voting patterns\nThe following histogram helps us understand voting patterns. \nThe original \n[infographic](http://www.nytimes.com/packages/html/newsgraphics/pages/hp/2008/2008-06-03-1800.html) \nis actually interactive. The following is a screenshot of one \nof the many histograms one can view:\n\n<img src=\"pics/nytimesvotingpattern.jpg\" width=\"600\" align=\"middle\">\n\n\n#### Tax rates by company\n\n[Here](\"http://www.nytimes.com/interactive/2013/05/25/sunday-review/corporate-taxes.html\") \nis another example of an advanced visualization based on the histogram idea.\n\nWe have already introduced some EDA approaches for _univariate_ data,\nnamely the histograms and qq-plots. Here we provide more details and \nintroduce some tools and summary statistics for paired data. \nWe do this using the `ggplot2` package and much of the focus of this \npart is introducing this powerful tool.\n\n\n\n## Motivating Example: Global Health and Economic Data\n\nThroughout this section we will be analyzing global health and \neconomic data. We will be exploring two questions: \n\n1. Is there a relationship between life expectancy and GDP per capita?\n2. How has the GDP per capita distribution changed across time?\n\nWe will use the data that has been organized and delivered in the \n`gapminder` package available in an \n[R package from Jenny Bryan](https://github.com/jennybc/gapminder).  \n\n\nTo install the `gapminder` data set\n\n```{r, eval = FALSE}\nlibrary(devtools)\ninstall_github(\"jennybc/gapminder\")\n```\n\n\n## Loading data into R\n\nWe start by loading the data. We will be using `dplyr` to manipulate the \ndata, so we load that as well.\n\n```{r, message=FALSE}\nlibrary(dplyr)\nlibrary(gapminder)\n```\n\nWe can take a quick peak at the loaded `gapminder` object:\n\n```{r}\ngapminder           ## returns the first 10 rows because it is a `tbl_df`\nstr(gapminder)\n```\n\nThis package provides a subset of the data provided by \n[Gapminder](http://www.gapminder.org/data/). The data comes as a \ndata frame (or `tbl_df` if you're using `dplyr`). We can visit \n[Gapminder.org documentation page](http://www.gapminder.org/data/documentation/) \nto obtain information about the columns:\n\n| variable  | meaning                  |\n|:----------|:-------------------------|\n| country   |                          |\n| continent |                          |\n| year      |                          |\n| lifeExp   | life expectancy at birth |\n| pop       | total population         |\n| gdpPercap | per-capita GDP           |\n\n\n\n\n## ggplot2\n\n[`ggplot2`](http://ggplot2.org) is a powerful data exploration and \nvisualization package that can create graphics in R. It was created by \n[Hadley Wickham](http://had.co.nz) when he was a graduate student at \nIowa State University and is based on the principals defined in the \n[Grammar of Graphics](http://www.amazon.com/The-Grammar-Graphics-Statistics-Computing/dp/0387245448).  \n\n\n#### Why is it useful?\n\nThe idea of the Grammar of Graphics is to break the graph into components \nand handle the components of a graph separately. The `ggplot2` package \ncontains a set of functions that allow us to build the features of the\ngraph in a series of layers for versatility and control. \n\nThere are two main plotting functions in `ggplot2`: \n\n* `qplot()` = a quick plot, similar to the `plot()` function in base R\n* `ggplot()` = a \"grammar of graphics\" (gg) plot which is made up two \ncomponents (a `ggplot()` object and at least one `geom` layer)\n\nFirst we will install and load `ggplot2`:\n\n```{r}\n#install.packages(\"ggplot2\", dependencies = TRUE)\nlibrary(ggplot2)\n```\n\nthen we will explore the differences between `qplot()` and `ggplot()`. \n\n\n## Life expectancy and GDP per capita\n\nTo try and answer our first question we will make a _scatterplot_. \nWe will do this for the latest entry in our database which is:\n\n```{r}\nmax( gapminder$year )\n```\n\nWe will first make a quick plot of these two variables. \n\n#### `qplot`\n\nThe `qplot` function  allows us to produce simple plots, similar to \n`plot` in base R.  The main input of `qplot` is an `x` and `y` argument, \nbut it also accepts a data set (`data`) where the `x` and `y` variables are \nlocated.  \n\nTo create a scatter-plot of life expectancy versus GDP per capita \nfor 2007, we start by creating a subset of the data with only the 2007 year.\n\n```{r}\ndat <- filter(gapminder, year==2007)\n```\n\nWhy does this not work?\n\n```{r,eval=FALSE}\nqplot(x = gdpPercap, y = lifeExp) \n```\n\nWe need to specify where to get these values from. Instead, we can\nuse the vectors of `dat` directly\n\n```{r}\n## need to specify where variables are located\nqplot(x = dat$gdpPercap, y = dat$lifeExp) \n```\n\nHowever, a cleaner way to do this does not define `dat` and instead uses the `data` argument:\n```{r}\n## instead of having to specify name of data frame each time, just list it once\nqplot(x = gdpPercap, y = lifeExp, data = filter(gapminder, year==2007))\n```\n\n\nAssessment: Read the help file for `qplot`. What is the argument used to add a label to the x-axis?\n\nAssessment: What is the argument used to add a label to the y-axis?\n\nAssessment: What is the argument used to add a label to the title?\n\n\nFrom this plot, we see that there is a wide variability in life expectancy \nfor the lower income countries and then somewhat of a positive trend. However, there are many countries with incomes below 5,000 dollars per \nperson and it is hard to see differences between these. Next we will now learn about the grammar of graphics and create a series of visualizations.\n\n\n## `ggplot`\n\nThis function is the implementation of the \"Grammar of Graphics\" that allows us to build layers of graphical elements to produce plots. As explained by Hadley Wickham\n\n> the grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinates system.\n\n#### Terminology \n* **ggplot** - the main function where you specify the data set and variables to plot (this is where we define the `x` and\n`y` variable names)\n* **geoms** - geometric objects\n    * e.g. `geom_point()`, `geom_bar()`, `geom_line()`, `geom_histogram()`\n* **aes** - aesthetics\n    * shape, transparency, color, fill, linetype\n* **scales** - define how your data will be plotted\n    * continuous, discrete, log, etc\n\nThere are three ways to initialize a `ggplot()` object. \n\nAn empty ggplot object\n```{r}\np <- ggplot()         \n```\n\nA ggplot object associated with a dataset\n```{r}\np <- ggplot(filter(gapminder, year==2007))\n```\nor a ggplot object with a dataset and `x` and `y` defined\n\n```{r}\np <- ggplot(filter(gapminder, year==2007), aes(x=gdpPercap, y = lifeExp))  \n```\n\n```{r, eval = FALSE}\np   ## generates an error. Why? \n```\n\n#### Creating your first ggplot()\n\nWe just used the function `aes()` which is an aesthetic mapping \nfunction inside the `ggplot()` object. We use this function to \nspecify plot attributes (e.g. `x` and `y` variable names) that \nwill not change as we add more layers.  \n\nAnything that goes in the `ggplot()` object becomes\na global setting.  From there, we use the `geom` objects to add \nmore layers to the base `ggplot()` object. \nThese will define what we are interested in \nillustrating using the data.  \n\nEarlier we noticed that there are many countries with incomes below 5,000 dollars per \nperson and it is hard to see differences between these. We can examine just this variable with a histogram. Here we would use a different geometry:\n\n```{r}\np <- ggplot(gapminder, aes(gdpPercap)) \np +geom_histogram()\n```\n\nHere we get a message telling us that the number of bins was chose to be 30. How can we change it?\n\nAssessment: Read the help file for `geom_histogram` and make a histogram with smaller bins:\n\n\nThe histogram shows very large tails. We may do better by transforming the data. For data like this, the log transformation seems to work well. It also has a nice economic interpretation related to percent growth: in $log_10$ a change of 1 means the country is 10 times richer.\n\nSo how do we make the x-axis in the log scale? It is convenient to have [this](https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf) cheat sheet around when using ggplot2. From there we see that `scale_x_log10` does what we want.\n\n```{r}\np <- ggplot(gapminder, aes(gdpPercap)) + geom_histogram(bins=25) + scale_x_log10()\np\n```\nWe no longer see extreme tails. The scatter plot now looks much more informative:\n\nAssessment: Remake the scatter plot but now make sure the x-axis is in a log-scale\n\n\nWe can also do this:\n```{r}\np2 <- ggplot(filter(gapminder, year==2007), \n            aes(log10(gdpPercap), y=lifeExp)) \np2 + geom_point()\n```\n\n\nThe first day we showed how to create a figure like this but with names. Now we can understand that code:\n\n```{r}\nlibrary(ggrepel)\np + geom_point(color = 'red') +\n  geom_text_repel(aes(label = country)) +\n  scale_x_log10() +\n  theme_classic(base_size = 16) \n```\n\n## Stratification\n\nOne of the most powerful operation we perform in EDA relates to stratifying the data. \n\nWhen we are examining the relationship between two variables, it is possible that another variable is clouding the relationship. For example, for the data we are examining here, it is possible that what drives the apparent relationship is continent. For example, that OECD countries are both rich and healthy, but that within continent there is no relationship between income and life expectancy.  By stratifying the data and re-examine the plot we can check for this possibility. We will learn other ways to do this, but a simple  way we can stratify is by using different colors. Here is the same plot with color representing continent.\n\n```{r}\np <- ggplot(filter(gapminder, year==2007), \n            aes(gdpPercap, y=lifeExp)) \np + geom_point(aes(color=continent)) + scale_x_log10()\n```\n\nNote that this plot reveals that the relationship is indeed weaker within Africa. Although it seems that the trend still holds. Next we learn about faceting which helps us visualize if in fact the different continents are driving this.\n\n\n#### Facets\n\nWe can examine different strata by \nfaceting. The idea is simply to split up your data by one or more variables and then plot the subsets of data together. The `facet_wrap` function gives us flexibility on how this happens. Here is an example\n\n\n```{r}\np + geom_point() +\n  facet_wrap(~continent) + scale_x_log10()\n```\n\nTo take a closer look, letting the scale of the axis change, we can add the following argument:\n\n```{r}\np + geom_point() +  \n  facet_wrap(~continent, scale=\"free\") + scale_x_log10()\n```\n\nAssessment: Examine the relationship for years 1952, ..., 2002. Use color to distinguish the continents.\n```{r}\n#subset the data set for the years we want (every ten years from 1952 - 2002)\nyears <- c(1952, 1962, 1972, 1982, 1992, 2002)\nyearData <- dat[dat$year%in%y,]\n\nyearData + geom_point() +\n  facet_wrap(~year) + scale_x_log10()\n\n```\n\n\nAssessment. The points seem a bit small. Read the cheat sheet and learn how to increase the size of points.\n\n\nThese plot clearly shows that the relationship is still present in each continent and year to year.\n\n#### Boxplot\n\nStratifying and the creating boxplot is one of the most useful forms of EDA. For example, we can \n\n```{r}\np2 <- ggplot(filter(gapminder, year==2007), \n            aes(continent, y=gdpPercap)) \np2 + geom_boxplot() + scale_y_log10()\n```\n\n```{r}\np2 <- ggplot(filter(gapminder, year%in%years), \n            aes(continent, y=gdpPercap)) \np2 + geom_boxplot(aes(color=continent)) + facet_grid(.~year)+scale_y_log10()\n```\n\n```{r}\np2 <- ggplot(filter(gapminder, year%in%years), \n            aes(continent, y=gdpPercap)) \np2 + geom_jitter(aes(color=continent)) + facet_grid(.~year)+scale_y_log10()\n```\n\n## Densities\n\n```{r}\np2 <- ggplot(filter(gapminder, year==1967), \n            aes(x=gdpPercap/365)) \np2 + geom_histogram() + scale_x_log10()\np2 + geom_density() + scale_x_log10()\n```\n\n```{r}\np2 <- ggplot(filter(gapminder, year%in%c(1967,2007) & continent%in%c(\"Europe\",\"Asia\")), \n            aes(x=gdpPercap/365,fill=continent) )\np2 + facet_grid(~year)+geom_density(alpha=.5) + scale_x_log10()\n```\n\n# Cheatsheets\n\n* [Data Visualization with ggplot2 from RStudio](https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf)\n",
    "created" : 1454545333285.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1091224760",
    "id" : "338117B3",
    "lastKnownWriteTime" : 1454981544,
    "path" : "~/Google Drive/COLLEGE WORK/Harvard Extension School/DataScience107/data_visualization_ggplot2.Rmd",
    "project_path" : "data_visualization_ggplot2.Rmd",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_markdown"
}