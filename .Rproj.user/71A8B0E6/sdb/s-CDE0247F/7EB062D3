{
    "contents" : "---\ntitle: Data Wrangling with `tidyr` \nauthor: Stephanie Hicks, Rafael Irizarry\n---\n\nThe data analysis process can be thought about in four parts\n\n1. Data cleaning\n2. Data transformation \n3. Data visualization\n4. Modeling\n\nwhere we each of these steps need their own tools and software to complete. \n\n![Bottlenecks in data analysis](http://r4ds.had.co.nz/diagrams/data-science.png)\n\nAs we have seen in class, one of the most time-consuming aspects of \nthe data analysis process is \"data wrangling\". This is also known \nas \"data munging\", which is a trendy term for \n_cleaning up a messy data set_. This refers to the first two steps in the \ndata analysis process: \n\n1. Data cleaning (or tidying data)\n2. Data transformation \n\nIt can take a long time to clean and transform messy data into a format \nthat is useful for data visualization and modeling, but there are tools \nthat can help turn messy data into clean data. \n\n### Defining data structures \n\nThere are many ways to define the structure of a data set. \nMost data frames are made up of **rows** and **columns** where the columns \nare almost always labeled and the rows are *sometimes* labeled. \n\nFor example, a data set could be structured in the following way: \n\n* each row represents one company (row names are companies)\n* each column represent one time point\n* the stock prices are defined for each row/column pair\n\n![stocks by company](pics/stocks-by-company.png)\n\nAlternatively, a data set can be structured in the following way:\n\n* each row represents one time point (but no row names)\n* the first column defines the time variable and the last three columns contain the stock prices for three companies \n\n![stocks by time](pics/stocks-by-time.png)\n\nIn both cases, the data is the same, but the structure is different. This \ncan be  _frustrating_ to deal with because the meaning of the \nvalues (rows and columns) in the two data sets are different. Providing a \nstandardized way of organizing values within a data set would alleviate \na major portion of this frustration.  \n\n\n### Defining tidy data\n\nNow, we will introduce the concept of **tidy** data. Tidy data is a \nstandard way of mapping the meaning of a dataset to its structure.\nThe properties of a tidy data set are based on: \n\n* Each column is a variable\n* Each rows is an observation\n\nWorking with tidy data is useful because it creates a structured way of\norganizing data values within a data set. This makes the data analysis \nprocess more efficient and simplifies the development of data analysis tools\nthat work together. In this way, you can focus on the problem you are\ninvestigating, rather than the uninteresting logistics of data.  \n\n\n### What is `tidyr`?\n\n[`tidyr`](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\nis an R package that transforms data sets to a tidy format. \n\nThere are two main functions in `tidyr`: \n\n* `gather()` = takes multiple columns, and gathers them into key-value pairs  \n(it makes \"wide\" data longer)\n* `separate()` = turns a single character column into multiple columns\n(it makes \"long\" data wider)\n\nWe'll explore what it means to go between a \"wide\" and \"long\" \ndata format using `gather()` and `separate()` next. \n\n\n### How do I get tidyr? \n\nTo install `tidyr`\n\n```{r, eval=FALSE}\ninstall.packages(\"tidyr\")\n```\n\nTo load `tidyr` and we'll need `dplyr`\n\n```{r, message=FALSE}\nlibrary(tidyr)\nlibrary(dplyr)\n```\n\nFor motivation, a tidy version of the stock data we looked at above\nlooks like this: (we'll learn how the functions work in just a moment)\n\n![stocks tidy](pics/stocks-tidy.png)\n\nIn this \"tidy\" data set, we have three columns representing three variables \n(time, company name and stock price). Every row represents contains one\nstock price from a particular time and for a specific company. \n\n### Pipe operator: %>%\n\nWe have introduced the operator: `%>%`. \ndplyr imports this operator from another package (`magrittr` [see help file here](http://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html)). \nThis operator allows you to pipe the output from one function to \nthe input of another function. Instead of nesting functions (reading \nfrom the inside to the outside), the idea of of piping is to read the \nfunctions from left to right. \n\nNow in this case, we pipe the `stocks` data frame to the function that will \ngather multiple columns into key-value pairs. \n\n\n# Data \n\n## 2016 Iowa Presidential Caucus \n\nWe will explore [public poll data from HuffPost Pollster](http://elections.huffingtonpost.com/pollster) \nfrom the 2016 Iowa [Democratic](http://elections.huffingtonpost.com/pollster/2016-iowa-presidential-democratic-caucus) and [Republican](http://elections.huffingtonpost.com/pollster/2016-iowa-presidential-republican-caucus) \nPresidential Caucus.\n\nFirst we will read in the data:\n```{r}\nlibrary(readr)\ndem_polls = read_csv(\"http://elections.huffingtonpost.com/pollster/2016-iowa-presidential-democratic-caucus.csv\")\nrep_polls = read_csv(\"http://elections.huffingtonpost.com/pollster/2016-iowa-presidential-republican-caucus.csv\")\n```\n\nLet's take a look at data\n```{r, eval=FALSE}\nView(dem_polls)\nView(rep_polls)\n\nglimpse(dem_polls)\nglimpse(rep_polls)\n```\n\nWe see there is a lot of information in each data frame.  First let's use \n`dplyr` to select a subset of the columns.  \n```{r}\ndem_polls <- dem_polls %>% \n                select(Pollster, `End Date`, Clinton:Undecided)\n\nrep_polls <- rep_polls %>% \n                select(Pollster, `End Date`, Trump:Walker)\n```\n\nIn the democratic and republican polling data sets, there is one column \nrepresenting the polling percentages for each candidate, \nsimilar to the stock price data set with multiple columns \nrepresenting different companies.  To **tidy** it, we need to *gather* these \ncolumns into a two-column *key-value* pair.  This is often described as \ntransforming a _wide_ data set into a _long_ data set.  \n\n\n\n\n# gather()\n\nThis function gathers multiple columns and collapses them into new \n*key-value* pairs. This transform data from _wide_ format into \na _long_ format. \n\n* The `key` is the name of the _new_ column that you are creating which \ncontains the values of the column headings that you are gathering \n* The `value` is the name of the _new_ column that will contain the values\nthemselves\n* The third argument defines the columns to gather\n\n```{r}\ndem_polls %>% \n    gather(key = candidate, value = percentage, Clinton:Undecided)\n```\n\nTo select a range of columns by name, use the \":\" (colon) operator\n\n#### Assessment \nUsing the democratic poll data, apply the `gather()` function \nto tidy the poll data by _excluding_ the Pollster and End Date columns, \nrather than directly providing the column names to gather.  \n\nHint: Look at the `gather()` help file on how to exclude column names.\n\n```{r}\n## Provide your code here\ndem_polls %>%\n  gather(key = candidate, value = percentage, -c(Pollster, `End Date`))\n```\n\n\n#### Assessment\nUsing the \"tidy\" democratic poll data, use dplyr to filter for only \nthe following candidates (Clinton, Sanders, O'Malley) and for polls \nonly ending after May 1, 2015. \n\n```{r}\n## Provide your code here\n\ndem_polls %>%\n  gather(key = candidate, value = percentage, Clinton:Undecided) %>%\n  filter(candidate %in% c(\"Clinton\", \"Sanders\", \"O'Malley\") &\n           `End Date` >= \"2015-05-01\")\n```\n\n#### Assessment (optional)\nUsing the tidy and filtered democratic poll data set, \nuse `ggplot2` to plot the results from each poll (percentage) for each\nof the candiates. Color the lines by the candidate. \n\n```{r}\n## Provide your code here\n\nlibrary(ggplot2)\n\ndem_polls %>%\n  gather(key = candidate, value = percentage, Clinton:Undecided) %>%\n  filter(candidate %in% c(\"Clinton\", \"Sanders\", \"O'Malley\") & \n           `End Date` >= \"2015-05-01\") %>%\n  ggplot(aes(x=`End Date`, y = percentage, color = candidate)) +\n  geom_line()\n\n```\n\n\n#### Assessment (optional) \nRepeat this analysis using the republican poll data. \nFilter for candidates (Trump, Cruz, Rubio, Carson, Bush) \nand for polls only after May 1, 2015. Color the lines by candidates. \n\n```{r}\n## Provide your code here\n\n\n```\n\n\n\n\n# spread()\n\nIn contrast to *gathering* multiple columns into key-value pairs, we can \n*spread* a key-value pair across multiple columns.  \n\nThe function `spread()` does just that. It transforms data from a _long_\nformat into a _wide_ format. \n\n* The `key` is the name of the column in your data set that \ncontains the values of the column headings that you are spreading across \nmultiple columns\n* The `value` is the name of the column that contains the values for the \nmultiple columns\n\n\n```{r}\ndem_polls_gathered <- dem_polls %>% \n                         gather(key = candidate, value = percentage, \n                                Clinton:Undecided)\ndem_polls_gathered\n\ndem_polls_gathered %>% \n    spread(key = candidate, value = percentage)\n```\n\n\n## Other supporting functions in tidyr\n\n* `separate()` = separate one column into multiple columns\n* `unite()` = unite multiple columns into one\n\n```{r}\ndem_polls_separate <- dem_polls %>% \n                        separate(col = `End Date`, into = c(\"y\", \"m\", \"d\"))\ndem_polls_separate\n```\n\n#### Assessment\n\nUse the `unite()` function to create a new column titled \"end_date\" that \ncombines the columns `y`, `m` and `d` together into a single column separated \nby the \"/\" character. \n\n```{r}\n## Provide your code here\n\ndem_polls_unite <- dem_polls_separate %>%\n                    unite(col = end_date, y, m, d, sep = \"/\")\n```\n\n\n# Cheatsheets\n\n* [Data Wrangling with dplyr and tidyr from RStudio](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\n\n\n\n",
    "created" : 1454983215851.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2514945562",
    "id" : "7EB062D3",
    "lastKnownWriteTime" : 1454987001,
    "path" : "~/Google Drive/COLLEGE WORK/Harvard Extension School/DataScience107/data_wrangling_with_tidyr.Rmd",
    "project_path" : "data_wrangling_with_tidyr.Rmd",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_markdown"
}